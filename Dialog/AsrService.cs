// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: asr_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sarmata {

  /// <summary>Holder for reflection information generated from asr_service.proto</summary>
  public static partial class AsrServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for asr_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AsrServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFhc3Jfc2VydmljZS5wcm90bxIHc2FybWF0YSJ7ChBSZWNvZ25pemVSZXF1",
            "ZXN0EjkKD2luaXRpYWxfcmVxdWVzdBgBIAEoCzIgLnNhcm1hdGEuSW5pdGlh",
            "bFJlY29nbml6ZVJlcXVlc3QSLAoNYXVkaW9fcmVxdWVzdBgCIAEoCzIVLnNh",
            "cm1hdGEuQXVkaW9SZXF1ZXN0IikKC0NvbmZpZ0ZpZWxkEgsKA2tleRgBIAEo",
            "CRINCgV2YWx1ZRgCIAEoCSJOChdJbml0aWFsUmVjb2duaXplUmVxdWVzdBIk",
            "CgZjb25maWcYASADKAsyFC5zYXJtYXRhLkNvbmZpZ0ZpZWxkEg0KBXRva2Vu",
            "GAIgASgJIjYKDEF1ZGlvUmVxdWVzdBIPCgdjb250ZW50GAEgASgMEhUKDWVu",
            "ZF9vZl9zdHJlYW0YAiABKAgiRAoURGVmaW5lR3JhbW1hclJlcXVlc3QSDQoF",
            "dG9rZW4YASABKAkSDAoEbmFtZRgCIAEoCRIPCgdncmFtbWFyGAMgASgJIjEK",
            "FERlZmluZUdyYW1tYXJSZXNwb25lEg0KBWVycm9yGAEgASgJEgoKAm9rGAIg",
            "ASgIIpIBChFSZWNvZ25pemVSZXNwb25zZRInCgZzdGF0dXMYASABKA4yFy5z",
            "YXJtYXRhLlJlc3BvbnNlU3RhdHVzEg0KBWVycm9yGAIgASgJEg8KB3dhcm5p",
            "bmcYAyABKAkSEgoKZXZlbnRfdGltZRgEIAEoBRIgCgdyZXN1bHRzGAUgAygL",
            "Mg8uc2FybWF0YS5QaHJhc2Ui0AEKBlBocmFzZRIjCgV3b3JkcxgBIAMoCzIU",
            "LnNhcm1hdGEuUGhyYXNlLldvcmQSEgoKY29uZmlkZW5jZRgCIAEoARIPCgdj",
            "b3JyZWN0GAMgASgIEh8KF3NlbWFudGljX2ludGVycHJldGF0aW9uGAQgASgJ",
            "GlsKBFdvcmQSEgoKdHJhbnNjcmlwdBgBIAEoCRISCgpjb25maWRlbmNlGAIg",
            "ASgBEg0KBXN0YXJ0GAMgASgFEgsKA2VuZBgEIAEoBRIPCgdsb2dwcm9iGAUg",
            "ASgBKpkCCg5SZXNwb25zZVN0YXR1cxIJCgVFTVBUWRAAEgsKB1NVQ0NFU1MQ",
            "ARIRCg1QQVJUSUFMX01BVENIEAISDAoITk9fTUFUQ0gQAxIUChBOT19JTlBV",
            "VF9USU1FT1VUEAQSGAoUR1JBTU1BUl9MT0FEX0ZBSUxVUkUQBRIfChtHUkFN",
            "TUFSX0NPTVBJTEFUSU9OX0ZBSUxVUkUQBhIUChBSRUNPR05JWkVSX0VSUk9S",
            "EAcSGwoXVE9PX01VQ0hfU1BFRUNIX1RJTUVPVVQQCBINCglDQU5DRUxMRUQQ",
            "CRISCg5TVEFSVF9PRl9JTlBVVBAKEhAKDEVORF9PRl9BVURJTxALEhUKEVNF",
            "TUFOVElDU19GQUlMVVJFEAwynAEKA0FTUhJGCglSZWNvZ25pemUSGS5zYXJt",
            "YXRhLlJlY29nbml6ZVJlcXVlc3QaGi5zYXJtYXRhLlJlY29nbml6ZVJlc3Bv",
            "bnNlKAEwARJNCg1EZWZpbmVHcmFtbWFyEh0uc2FybWF0YS5EZWZpbmVHcmFt",
            "bWFyUmVxdWVzdBodLnNhcm1hdGEuRGVmaW5lR3JhbW1hclJlc3BvbmViBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Sarmata.ResponseStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sarmata.RecognizeRequest), global::Sarmata.RecognizeRequest.Parser, new[]{ "InitialRequest", "AudioRequest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sarmata.ConfigField), global::Sarmata.ConfigField.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sarmata.InitialRecognizeRequest), global::Sarmata.InitialRecognizeRequest.Parser, new[]{ "Config", "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sarmata.AudioRequest), global::Sarmata.AudioRequest.Parser, new[]{ "Content", "EndOfStream" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sarmata.DefineGrammarRequest), global::Sarmata.DefineGrammarRequest.Parser, new[]{ "Token", "Name", "Grammar" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sarmata.DefineGrammarRespone), global::Sarmata.DefineGrammarRespone.Parser, new[]{ "Error", "Ok" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sarmata.RecognizeResponse), global::Sarmata.RecognizeResponse.Parser, new[]{ "Status", "Error", "Warning", "EventTime", "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sarmata.Phrase), global::Sarmata.Phrase.Parser, new[]{ "Words", "Confidence", "Correct", "SemanticInterpretation" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sarmata.Phrase.Types.Word), global::Sarmata.Phrase.Types.Word.Parser, new[]{ "Transcript", "Confidence", "Start", "End", "Logprob" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum ResponseStatus {
    /// <summary>
    ///  Should not be set
    /// </summary>
    [pbr::OriginalName("EMPTY")] Empty = 0,
    /// <summary>
    ///  Phrase recognized
    /// </summary>
    [pbr::OriginalName("SUCCESS")] Success = 1,
    /// <summary>
    ///  only beginning of utterence recognized
    /// </summary>
    [pbr::OriginalName("PARTIAL_MATCH")] PartialMatch = 2,
    /// <summary>
    ///  no phrse recognized
    /// </summary>
    [pbr::OriginalName("NO_MATCH")] NoMatch = 3,
    /// <summary>
    ///  no spech or no match in expected time
    /// </summary>
    [pbr::OriginalName("NO_INPUT_TIMEOUT")] NoInputTimeout = 4,
    /// <summary>
    ///  grammar connot be loaded, more details in `error` filed
    /// </summary>
    [pbr::OriginalName("GRAMMAR_LOAD_FAILURE")] GrammarLoadFailure = 5,
    /// <summary>
    ///  grammar compilation error, more details in `error` filed
    /// </summary>
    [pbr::OriginalName("GRAMMAR_COMPILATION_FAILURE")] GrammarCompilationFailure = 6,
    /// <summary>
    ///  iternal error
    /// </summary>
    [pbr::OriginalName("RECOGNIZER_ERROR")] RecognizerError = 7,
    /// <summary>
    ///  speech to long
    /// </summary>
    [pbr::OriginalName("TOO_MUCH_SPEECH_TIMEOUT")] TooMuchSpeechTimeout = 8,
    /// <summary>
    ///  recognition cancelled
    /// </summary>
    [pbr::OriginalName("CANCELLED")] Cancelled = 9,
    /// <summary>
    ///  start of speech detected
    /// </summary>
    [pbr::OriginalName("START_OF_INPUT")] StartOfInput = 10,
    /// <summary>
    ///  finished processing
    /// </summary>
    [pbr::OriginalName("END_OF_AUDIO")] EndOfAudio = 11,
    /// <summary>
    ///  error in SI processing
    /// </summary>
    [pbr::OriginalName("SEMANTICS_FAILURE")] SemanticsFailure = 12,
  }

  #endregion

  #region Messages
  public sealed partial class RecognizeRequest : pb::IMessage<RecognizeRequest> {
    private static readonly pb::MessageParser<RecognizeRequest> _parser = new pb::MessageParser<RecognizeRequest>(() => new RecognizeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecognizeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sarmata.AsrServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognizeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognizeRequest(RecognizeRequest other) : this() {
      InitialRequest = other.initialRequest_ != null ? other.InitialRequest.Clone() : null;
      AudioRequest = other.audioRequest_ != null ? other.AudioRequest.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognizeRequest Clone() {
      return new RecognizeRequest(this);
    }

    /// <summary>Field number for the "initial_request" field.</summary>
    public const int InitialRequestFieldNumber = 1;
    private global::Sarmata.InitialRecognizeRequest initialRequest_;
    /// <summary>
    ///  The `initial_request` message provides information to the recognizer
    ///  that specifies how to process the request.
    ///
    ///  The first `RecognizeRequest` message must contain an `initial_request`.
    ///  Any subsequent `RecognizeRequest` messages must not contain an
    ///  `initial_request`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sarmata.InitialRecognizeRequest InitialRequest {
      get { return initialRequest_; }
      set {
        initialRequest_ = value;
      }
    }

    /// <summary>Field number for the "audio_request" field.</summary>
    public const int AudioRequestFieldNumber = 2;
    private global::Sarmata.AudioRequest audioRequest_;
    /// <summary>
    ///  The audio data to be recognized. Sequential chunks of audio data may be 
    ///  sent in sequential `RecognizeRequest` messages or whole data may be send in one message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sarmata.AudioRequest AudioRequest {
      get { return audioRequest_; }
      set {
        audioRequest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecognizeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecognizeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InitialRequest, other.InitialRequest)) return false;
      if (!object.Equals(AudioRequest, other.AudioRequest)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (initialRequest_ != null) hash ^= InitialRequest.GetHashCode();
      if (audioRequest_ != null) hash ^= AudioRequest.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (initialRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InitialRequest);
      }
      if (audioRequest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AudioRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (initialRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitialRequest);
      }
      if (audioRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AudioRequest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecognizeRequest other) {
      if (other == null) {
        return;
      }
      if (other.initialRequest_ != null) {
        if (initialRequest_ == null) {
          initialRequest_ = new global::Sarmata.InitialRecognizeRequest();
        }
        InitialRequest.MergeFrom(other.InitialRequest);
      }
      if (other.audioRequest_ != null) {
        if (audioRequest_ == null) {
          audioRequest_ = new global::Sarmata.AudioRequest();
        }
        AudioRequest.MergeFrom(other.AudioRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (initialRequest_ == null) {
              initialRequest_ = new global::Sarmata.InitialRecognizeRequest();
            }
            input.ReadMessage(initialRequest_);
            break;
          }
          case 18: {
            if (audioRequest_ == null) {
              audioRequest_ = new global::Sarmata.AudioRequest();
            }
            input.ReadMessage(audioRequest_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  single configuration option
  /// </summary>
  public sealed partial class ConfigField : pb::IMessage<ConfigField> {
    private static readonly pb::MessageParser<ConfigField> _parser = new pb::MessageParser<ConfigField>(() => new ConfigField());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sarmata.AsrServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigField() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigField(ConfigField other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigField Clone() {
      return new ConfigField(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigField other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigField other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitialRecognizeRequest : pb::IMessage<InitialRecognizeRequest> {
    private static readonly pb::MessageParser<InitialRecognizeRequest> _parser = new pb::MessageParser<InitialRecognizeRequest>(() => new InitialRecognizeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitialRecognizeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sarmata.AsrServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialRecognizeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialRecognizeRequest(InitialRecognizeRequest other) : this() {
      config_ = other.config_.Clone();
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialRecognizeRequest Clone() {
      return new InitialRecognizeRequest(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sarmata.ConfigField> _repeated_config_codec
        = pb::FieldCodec.ForMessage(10, global::Sarmata.ConfigField.Parser);
    private readonly pbc::RepeatedField<global::Sarmata.ConfigField> config_ = new pbc::RepeatedField<global::Sarmata.ConfigField>();
    /// <summary>
    ///  configuration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sarmata.ConfigField> Config {
      get { return config_; }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    /// <summary>
    ///  authorization token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitialRecognizeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitialRecognizeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!config_.Equals(other.config_)) return false;
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= config_.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      config_.WriteTo(output, _repeated_config_codec);
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += config_.CalculateSize(_repeated_config_codec);
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitialRecognizeRequest other) {
      if (other == null) {
        return;
      }
      config_.Add(other.config_);
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            config_.AddEntriesFrom(input, _repeated_config_codec);
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AudioRequest : pb::IMessage<AudioRequest> {
    private static readonly pb::MessageParser<AudioRequest> _parser = new pb::MessageParser<AudioRequest>(() => new AudioRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sarmata.AsrServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioRequest(AudioRequest other) : this() {
      content_ = other.content_;
      endOfStream_ = other.endOfStream_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioRequest Clone() {
      return new AudioRequest(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private pb::ByteString content_ = pb::ByteString.Empty;
    /// <summary>
    ///  The audio data bytes encoded by default as 16bit 16kHz PCM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "end_of_stream" field.</summary>
    public const int EndOfStreamFieldNumber = 2;
    private bool endOfStream_;
    /// <summary>
    ///  last message flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EndOfStream {
      get { return endOfStream_; }
      set {
        endOfStream_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (EndOfStream != other.EndOfStream) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (EndOfStream != false) hash ^= EndOfStream.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Content);
      }
      if (EndOfStream != false) {
        output.WriteRawTag(16);
        output.WriteBool(EndOfStream);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (EndOfStream != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioRequest other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.EndOfStream != false) {
        EndOfStream = other.EndOfStream;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadBytes();
            break;
          }
          case 16: {
            EndOfStream = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DefineGrammarRequest : pb::IMessage<DefineGrammarRequest> {
    private static readonly pb::MessageParser<DefineGrammarRequest> _parser = new pb::MessageParser<DefineGrammarRequest>(() => new DefineGrammarRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefineGrammarRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sarmata.AsrServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineGrammarRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineGrammarRequest(DefineGrammarRequest other) : this() {
      token_ = other.token_;
      name_ = other.name_;
      grammar_ = other.grammar_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineGrammarRequest Clone() {
      return new DefineGrammarRequest(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    ///  authorization token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  grammar id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grammar" field.</summary>
    public const int GrammarFieldNumber = 3;
    private string grammar_ = "";
    /// <summary>
    ///  grammar data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Grammar {
      get { return grammar_; }
      set {
        grammar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefineGrammarRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefineGrammarRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (Name != other.Name) return false;
      if (Grammar != other.Grammar) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Grammar.Length != 0) hash ^= Grammar.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Grammar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Grammar);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Grammar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Grammar);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefineGrammarRequest other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Grammar.Length != 0) {
        Grammar = other.Grammar;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Grammar = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DefineGrammarRespone : pb::IMessage<DefineGrammarRespone> {
    private static readonly pb::MessageParser<DefineGrammarRespone> _parser = new pb::MessageParser<DefineGrammarRespone>(() => new DefineGrammarRespone());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefineGrammarRespone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sarmata.AsrServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineGrammarRespone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineGrammarRespone(DefineGrammarRespone other) : this() {
      error_ = other.error_;
      ok_ = other.ok_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineGrammarRespone Clone() {
      return new DefineGrammarRespone(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    /// <summary>
    ///  error description
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 2;
    private bool ok_;
    /// <summary>
    ///  true if grammar is was created
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefineGrammarRespone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefineGrammarRespone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (Ok != other.Ok) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (Ok != false) hash ^= Ok.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (Ok != false) {
        output.WriteRawTag(16);
        output.WriteBool(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (Ok != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefineGrammarRespone other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.Ok != false) {
        Ok = other.Ok;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
          case 16: {
            Ok = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecognizeResponse : pb::IMessage<RecognizeResponse> {
    private static readonly pb::MessageParser<RecognizeResponse> _parser = new pb::MessageParser<RecognizeResponse>(() => new RecognizeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecognizeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sarmata.AsrServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognizeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognizeResponse(RecognizeResponse other) : this() {
      status_ = other.status_;
      error_ = other.error_;
      warning_ = other.warning_;
      eventTime_ = other.eventTime_;
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecognizeResponse Clone() {
      return new RecognizeResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Sarmata.ResponseStatus status_ = 0;
    /// <summary>
    ///  status and type of message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sarmata.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    /// <summary>
    ///  critical error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "warning" field.</summary>
    public const int WarningFieldNumber = 3;
    private string warning_ = "";
    /// <summary>
    ///  minor error, ex: error in transcription
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Warning {
      get { return warning_; }
      set {
        warning_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_time" field.</summary>
    public const int EventTimeFieldNumber = 4;
    private int eventTime_;
    /// <summary>
    ///  time of event if applicable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTime {
      get { return eventTime_; }
      set {
        eventTime_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Sarmata.Phrase> _repeated_results_codec
        = pb::FieldCodec.ForMessage(42, global::Sarmata.Phrase.Parser);
    private readonly pbc::RepeatedField<global::Sarmata.Phrase> results_ = new pbc::RepeatedField<global::Sarmata.Phrase>();
    /// <summary>
    ///  list of recognized phrases in probability order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sarmata.Phrase> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecognizeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecognizeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Error != other.Error) return false;
      if (Warning != other.Warning) return false;
      if (EventTime != other.EventTime) return false;
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (Warning.Length != 0) hash ^= Warning.GetHashCode();
      if (EventTime != 0) hash ^= EventTime.GetHashCode();
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (Warning.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Warning);
      }
      if (EventTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventTime);
      }
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (Warning.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Warning);
      }
      if (EventTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTime);
      }
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecognizeResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.Warning.Length != 0) {
        Warning = other.Warning;
      }
      if (other.EventTime != 0) {
        EventTime = other.EventTime;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Sarmata.ResponseStatus) input.ReadEnum();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
          case 26: {
            Warning = input.ReadString();
            break;
          }
          case 32: {
            EventTime = input.ReadInt32();
            break;
          }
          case 42: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  single phrase data
  /// </summary>
  public sealed partial class Phrase : pb::IMessage<Phrase> {
    private static readonly pb::MessageParser<Phrase> _parser = new pb::MessageParser<Phrase>(() => new Phrase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Phrase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sarmata.AsrServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Phrase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Phrase(Phrase other) : this() {
      words_ = other.words_.Clone();
      confidence_ = other.confidence_;
      correct_ = other.correct_;
      semanticInterpretation_ = other.semanticInterpretation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Phrase Clone() {
      return new Phrase(this);
    }

    /// <summary>Field number for the "words" field.</summary>
    public const int WordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sarmata.Phrase.Types.Word> _repeated_words_codec
        = pb::FieldCodec.ForMessage(10, global::Sarmata.Phrase.Types.Word.Parser);
    private readonly pbc::RepeatedField<global::Sarmata.Phrase.Types.Word> words_ = new pbc::RepeatedField<global::Sarmata.Phrase.Types.Word>();
    /// <summary>
    ///  words in phrases
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sarmata.Phrase.Types.Word> Words {
      get { return words_; }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 2;
    private double confidence_;
    /// <summary>
    /// confidence of phrase
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    /// <summary>Field number for the "correct" field.</summary>
    public const int CorrectFieldNumber = 3;
    private bool correct_;
    /// <summary>
    ///  is correct (confidence above thresshold)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Correct {
      get { return correct_; }
      set {
        correct_ = value;
      }
    }

    /// <summary>Field number for the "semantic_interpretation" field.</summary>
    public const int SemanticInterpretationFieldNumber = 4;
    private string semanticInterpretation_ = "";
    /// <summary>
    ///  Semantic Interpretation in JSON
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SemanticInterpretation {
      get { return semanticInterpretation_; }
      set {
        semanticInterpretation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Phrase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Phrase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!words_.Equals(other.words_)) return false;
      if (Confidence != other.Confidence) return false;
      if (Correct != other.Correct) return false;
      if (SemanticInterpretation != other.SemanticInterpretation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= words_.GetHashCode();
      if (Confidence != 0D) hash ^= Confidence.GetHashCode();
      if (Correct != false) hash ^= Correct.GetHashCode();
      if (SemanticInterpretation.Length != 0) hash ^= SemanticInterpretation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      words_.WriteTo(output, _repeated_words_codec);
      if (Confidence != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Confidence);
      }
      if (Correct != false) {
        output.WriteRawTag(24);
        output.WriteBool(Correct);
      }
      if (SemanticInterpretation.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SemanticInterpretation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += words_.CalculateSize(_repeated_words_codec);
      if (Confidence != 0D) {
        size += 1 + 8;
      }
      if (Correct != false) {
        size += 1 + 1;
      }
      if (SemanticInterpretation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SemanticInterpretation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Phrase other) {
      if (other == null) {
        return;
      }
      words_.Add(other.words_);
      if (other.Confidence != 0D) {
        Confidence = other.Confidence;
      }
      if (other.Correct != false) {
        Correct = other.Correct;
      }
      if (other.SemanticInterpretation.Length != 0) {
        SemanticInterpretation = other.SemanticInterpretation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            words_.AddEntriesFrom(input, _repeated_words_codec);
            break;
          }
          case 17: {
            Confidence = input.ReadDouble();
            break;
          }
          case 24: {
            Correct = input.ReadBool();
            break;
          }
          case 34: {
            SemanticInterpretation = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Phrase message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  single word data
      /// </summary>
      public sealed partial class Word : pb::IMessage<Word> {
        private static readonly pb::MessageParser<Word> _parser = new pb::MessageParser<Word>(() => new Word());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Word> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sarmata.Phrase.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Word() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Word(Word other) : this() {
          transcript_ = other.transcript_;
          confidence_ = other.confidence_;
          start_ = other.start_;
          end_ = other.end_;
          logprob_ = other.logprob_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Word Clone() {
          return new Word(this);
        }

        /// <summary>Field number for the "transcript" field.</summary>
        public const int TranscriptFieldNumber = 1;
        private string transcript_ = "";
        /// <summary>
        ///  recognized word
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Transcript {
          get { return transcript_; }
          set {
            transcript_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "confidence" field.</summary>
        public const int ConfidenceFieldNumber = 2;
        private double confidence_;
        /// <summary>
        ///  word confidence
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Confidence {
          get { return confidence_; }
          set {
            confidence_ = value;
          }
        }

        /// <summary>Field number for the "start" field.</summary>
        public const int StartFieldNumber = 3;
        private int start_;
        /// <summary>
        ///  beginning time
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Start {
          get { return start_; }
          set {
            start_ = value;
          }
        }

        /// <summary>Field number for the "end" field.</summary>
        public const int EndFieldNumber = 4;
        private int end_;
        /// <summary>
        ///  end time
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int End {
          get { return end_; }
          set {
            end_ = value;
          }
        }

        /// <summary>Field number for the "logprob" field.</summary>
        public const int LogprobFieldNumber = 5;
        private double logprob_;
        /// <summary>
        ///  logprob of word
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Logprob {
          get { return logprob_; }
          set {
            logprob_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Word);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Word other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Transcript != other.Transcript) return false;
          if (Confidence != other.Confidence) return false;
          if (Start != other.Start) return false;
          if (End != other.End) return false;
          if (Logprob != other.Logprob) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Transcript.Length != 0) hash ^= Transcript.GetHashCode();
          if (Confidence != 0D) hash ^= Confidence.GetHashCode();
          if (Start != 0) hash ^= Start.GetHashCode();
          if (End != 0) hash ^= End.GetHashCode();
          if (Logprob != 0D) hash ^= Logprob.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Transcript.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Transcript);
          }
          if (Confidence != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Confidence);
          }
          if (Start != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Start);
          }
          if (End != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(End);
          }
          if (Logprob != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(Logprob);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Transcript.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Transcript);
          }
          if (Confidence != 0D) {
            size += 1 + 8;
          }
          if (Start != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
          }
          if (End != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(End);
          }
          if (Logprob != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Word other) {
          if (other == null) {
            return;
          }
          if (other.Transcript.Length != 0) {
            Transcript = other.Transcript;
          }
          if (other.Confidence != 0D) {
            Confidence = other.Confidence;
          }
          if (other.Start != 0) {
            Start = other.Start;
          }
          if (other.End != 0) {
            End = other.End;
          }
          if (other.Logprob != 0D) {
            Logprob = other.Logprob;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Transcript = input.ReadString();
                break;
              }
              case 17: {
                Confidence = input.ReadDouble();
                break;
              }
              case 24: {
                Start = input.ReadInt32();
                break;
              }
              case 32: {
                End = input.ReadInt32();
                break;
              }
              case 41: {
                Logprob = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
