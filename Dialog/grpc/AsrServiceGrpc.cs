// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: asr_service.proto
// Original file comments:
// some code and comment are copied form:
// https://github.com/GoogleCloudPlatform/java-docs-samples/blob/master/speech/grpc/src/main/java/third_party/google/speech/v1/cloud-speech.proto
//
// grammar persistence options
// - per alive connection: user opens special channel to service to define grammars, grammars are kept as long as connection is alive
// - predefined per user on disk: service keep predefined grammar as files on disk, loads it at startup
// - auto-cache: all grammars are cached automatically using its hash as ID, max number of cached grammars and prune policy must be defined
//
// users account manipulation will be provided by different service
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Sarmata {
  public static class ASR
  {
    static readonly string __ServiceName = "sarmata.ASR";

    static readonly Marshaller<global::Sarmata.RecognizeRequest> __Marshaller_RecognizeRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sarmata.RecognizeRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Sarmata.RecognizeResponse> __Marshaller_RecognizeResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sarmata.RecognizeResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Sarmata.DefineGrammarRequest> __Marshaller_DefineGrammarRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sarmata.DefineGrammarRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Sarmata.DefineGrammarRespone> __Marshaller_DefineGrammarRespone = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sarmata.DefineGrammarRespone.Parser.ParseFrom);

    static readonly Method<global::Sarmata.RecognizeRequest, global::Sarmata.RecognizeResponse> __Method_Recognize = new Method<global::Sarmata.RecognizeRequest, global::Sarmata.RecognizeResponse>(
        MethodType.DuplexStreaming,
        __ServiceName,
        "Recognize",
        __Marshaller_RecognizeRequest,
        __Marshaller_RecognizeResponse);

    static readonly Method<global::Sarmata.DefineGrammarRequest, global::Sarmata.DefineGrammarRespone> __Method_DefineGrammar = new Method<global::Sarmata.DefineGrammarRequest, global::Sarmata.DefineGrammarRespone>(
        MethodType.Unary,
        __ServiceName,
        "DefineGrammar",
        __Marshaller_DefineGrammarRequest,
        __Marshaller_DefineGrammarRespone);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sarmata.AsrServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ASR</summary>
    public abstract class ASRBase
    {
      /// <summary>
      ///  recognizes speech in stream using given grammar
      /// </summary>
      public virtual global::System.Threading.Tasks.Task Recognize(IAsyncStreamReader<global::Sarmata.RecognizeRequest> requestStream, IServerStreamWriter<global::Sarmata.RecognizeResponse> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  defines user-persistent grammar 
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Sarmata.DefineGrammarRespone> DefineGrammar(global::Sarmata.DefineGrammarRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ASR</summary>
    public class ASRClient : ClientBase<ASRClient>
    {
      /// <summary>Creates a new client for ASR</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ASRClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ASR that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ASRClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ASRClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ASRClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  recognizes speech in stream using given grammar
      /// </summary>
      public virtual AsyncDuplexStreamingCall<global::Sarmata.RecognizeRequest, global::Sarmata.RecognizeResponse> Recognize(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Recognize(new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  recognizes speech in stream using given grammar
      /// </summary>
      public virtual AsyncDuplexStreamingCall<global::Sarmata.RecognizeRequest, global::Sarmata.RecognizeResponse> Recognize(CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Recognize, null, options);
      }
      /// <summary>
      ///  defines user-persistent grammar 
      /// </summary>
      public virtual global::Sarmata.DefineGrammarRespone DefineGrammar(global::Sarmata.DefineGrammarRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DefineGrammar(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  defines user-persistent grammar 
      /// </summary>
      public virtual global::Sarmata.DefineGrammarRespone DefineGrammar(global::Sarmata.DefineGrammarRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DefineGrammar, null, options, request);
      }
      /// <summary>
      ///  defines user-persistent grammar 
      /// </summary>
      public virtual AsyncUnaryCall<global::Sarmata.DefineGrammarRespone> DefineGrammarAsync(global::Sarmata.DefineGrammarRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DefineGrammarAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  defines user-persistent grammar 
      /// </summary>
      public virtual AsyncUnaryCall<global::Sarmata.DefineGrammarRespone> DefineGrammarAsync(global::Sarmata.DefineGrammarRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DefineGrammar, null, options, request);
      }
      protected override ASRClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ASRClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ASRBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Recognize, serviceImpl.Recognize)
          .AddMethod(__Method_DefineGrammar, serviceImpl.DefineGrammar).Build();
    }

  }
}
#endregion
